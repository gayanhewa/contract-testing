"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseOa3Servers = void 0;
const parser_helpers_1 = require("./parser-helpers");
const type_parser_1 = require("./type-parser");
const util_1 = require("../util");
const errors_1 = require("../errors");
function parseOa3Servers(klass, typeTable, lociTable) {
    const serverMethods = klass
        .getMethods()
        .filter(m => m.getDecorator("oa3server") !== undefined);
    const servers = [];
    for (const method of serverMethods) {
        const serverResult = parseOa3Server(method, typeTable, lociTable);
        if (serverResult.isErr())
            return serverResult;
        servers.push(serverResult.unwrap());
    }
    return util_1.ok(servers);
}
exports.parseOa3Servers = parseOa3Servers;
function parseOa3Server(serverMethod, typeTable, lociTable) {
    const decorator = serverMethod.getDecoratorOrThrow("oa3server");
    const decoratorConfig = parser_helpers_1.getDecoratorConfigOrThrow(decorator);
    const urlProp = parser_helpers_1.getObjLiteralPropOrThrow(decoratorConfig, "url");
    const urlLiteral = parser_helpers_1.getPropValueAsStringOrThrow(urlProp);
    const jsDocNode = parser_helpers_1.getJsDoc(serverMethod);
    const description = jsDocNode === null || jsDocNode === void 0 ? void 0 : jsDocNode.getDescription().trim();
    const oa3serverVariablesParam = parser_helpers_1.getParamWithDecorator(serverMethod, "oa3serverVariables");
    const serverVariables = [];
    if (oa3serverVariablesParam) {
        const variablesResult = parseOa3Variables(oa3serverVariablesParam, typeTable, lociTable);
        if (variablesResult.isErr())
            return variablesResult;
        serverVariables.push(...variablesResult.unwrap());
    }
    return util_1.ok({
        url: urlLiteral.getLiteralValue(),
        description: description,
        oa3ServerVariables: serverVariables
    });
}
function parseOa3Variables(parameter, typeTable, lociTable) {
    var _a;
    parameter.getDecoratorOrThrow("oa3serverVariables");
    if (parameter.hasQuestionToken()) {
        return util_1.err(new errors_1.OptionalNotAllowedError("@oa3serverVariables parameter cannot be optional", {
            file: parameter.getSourceFile().getFilePath(),
            position: parameter.getQuestionTokenNodeOrThrow().getPos()
        }));
    }
    const queryParamPropertySignatures = parser_helpers_1.getParameterPropertySignaturesOrThrow(parameter);
    const oa3ServerVariableParams = [];
    for (const propertySignature of queryParamPropertySignatures) {
        const typeResult = type_parser_1.parseType(propertySignature.getTypeNodeOrThrow(), typeTable, lociTable);
        if (typeResult.isErr())
            return typeResult;
        const type = typeResult.unwrap();
        const parameterName = parser_helpers_1.getPropertyName(propertySignature);
        const jsDocNode = parser_helpers_1.getJsDoc(propertySignature);
        const description = jsDocNode === null || jsDocNode === void 0 ? void 0 : jsDocNode.getDescription().trim();
        const defaultTagNode = jsDocNode === null || jsDocNode === void 0 ? void 0 : jsDocNode.getTags().find(tag => tag.getTagName() === "default");
        const defaultTag = (_a = defaultTagNode === null || defaultTagNode === void 0 ? void 0 : defaultTagNode.getComment()) === null || _a === void 0 ? void 0 : _a.toString();
        if (!defaultTag) {
            return util_1.err(new errors_1.ParserError("@default tag is mandatory ! ", {
                file: propertySignature.getSourceFile().getFilePath(),
                position: propertySignature.getPos()
            }));
        }
        oa3ServerVariableParams.push({
            type: type,
            description: description,
            defaultValue: defaultTag.replace(/^"(.*)"$/, "$1"),
            parameterName: parameterName
        });
    }
    return util_1.ok(oa3ServerVariableParams);
}
