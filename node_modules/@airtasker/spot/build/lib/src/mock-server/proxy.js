"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyRequest = void 0;
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const matcher_1 = require("./matcher");
function proxyRequest({ incomingRequest, response, proxyConfig }) {
    const requestHandler = proxyConfig.isHttps ? https_1.default : http_1.default;
    const options = {
        method: incomingRequest.method,
        host: proxyConfig.host,
        port: proxyConfig.port === null
            ? proxyConfig.isHttps
                ? 443
                : 80
            : proxyConfig.port,
        path: matcher_1.normalisePath(proxyConfig.path + incomingRequest.path),
        headers: {
            ...incomingRequest.headers,
            host: proxyConfig.host
        }
    };
    const proxyRequest = requestHandler.request(options, res => {
        var _a;
        // Forward headers
        response.writeHead((_a = res.statusCode) !== null && _a !== void 0 ? _a : response.statusCode, res.headers);
        res.pipe(response);
    });
    proxyRequest.on("error", e => {
        console.error(`Failed to proxy request: ${e}`, e.stack);
        response.statusCode = 500;
        response.send();
    });
    if (incomingRequest.body && Buffer.isBuffer(incomingRequest.body)) {
        proxyRequest.write(incomingRequest.body);
    }
    proxyRequest.end();
}
exports.proxyRequest = proxyRequest;
